// Basic styling
* {
  line-height: $line-height;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

html {
  font-size: $font-size;
  word-break: keep-all;
}

body {
  font: $font-weight-normal #{$font-size}/#{$line-height} $font-sans-serif;
  color: $text-color;
  background-color: $ocean-blue-900; // $background-color;
  text-size-adjust: 100%;
  -webkit-font-feature-settings: "kern" 1;
  -moz-font-feature-settings: "kern" 1;
  -o-font-feature-settings: "kern" 1;
  font-feature-settings: "kern" 1;
  font-kerning: normal;
}

h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
ul, ol, dl, figure,
%vertical-rhythm {
  margin-bottom: $space8;
}

hr {
  margin-top: $space32;
  margin-bottom: $space32;
}


// Images
img {
  max-width: 100%;
  vertical-align: middle;

  &.icon {
    border-radius: 20%;
  }
}

picture {
  // FIXME:
  // 랩퍼를 벗어나 가운데에서 왼쪽으로 뻗거나 오른쪽으로 뻗는
  // overflow image를 구현하기 위해 position 가지고 훼이크 치는 거여.
  // 지금은 이것보다 나은 방법을 모르것어...
  // 그리드로 처리할까 했는데 picture가 독립적이지 않아서 접었고,,
  // 도대체 어떻게 하는 거냐? 더럽지 않은 방법으로.
  position: relative;
  img {
    width: 100%;
  }
  &.left img {
    position: absolute;
    width: auto;
    max-height: 360px;
    right: 0;
  }
  &.right img {
    position: absolute;
    width: auto;
    max-height: 360px;
    left: 0;
  }
}


// Figures
figure > img {
  display: block;
}

figcaption {
  font-size: $font-small-size;
}


// List
ul, ol {
  margin-left: $space32;
}

ul {
  list-style-type: disc;
}

ol {
  list-style-type: decimal;
}

li {
  > ul,
  > ol {
    margin-bottom: 0;
  }
}


// Headings
h1, h2, h3, h4, h5, h6 {
  display: block;
  font-family: $font-sans-serif;
}

main {
  background-color: $background-color;
  h1, h2, h3 { margin-top: $space32 }
  h4, h5, h6 { margin-top: $space16 }
  h1 {
    font-size: $font-xxxlarge-size;
    letter-space: -1px;
    line-height: 1.15;
    @media screen and (min-width:$screen-small-width) {
      font-size: $font-xxxxlarge-size; // default
    }
  }
  h2 {
    font-size: $font-xxlarge-size;
    @media screen and (min-width:$screen-small-width) {
      font-size: $font-xxxlarge-size; // default
    }
    @media screen and (min-width:$screen-xlarge-width) {
      font-size: $font-xxxxlarge-size;
    }
  }
  h3 {
    font-size: $font-xlarge-size;
    @media screen and (min-width:$screen-small-width) {
      font-size: $font-xxlarge-size; // default
    }
    @media screen and (min-width:$screen-xlarge-width) {
      font-size: $font-xxxlarge-size;
    }
  }
  h4 {
    font-size: $font-large-size;
    font-weight: bold;
    @media screen and (min-width:$screen-small-width) {
      font-size: $font-xlarge-size; // default
      font-weight: normal;
    }
  }
  h5 {
    font-size: $font-large-size;
  }
  h6 {
    font-size: $font-large-size;
  }
}

p {
  margin-bottom: $space16;
  &:last-child {
    margin-bottom: 0;
  }
}

// Links
a {
  color: $link-color;
  text-decoration: none;
  &:visited {
    color: $link-visited-color;
  }
  &:hover,
  &:focus {
    color: $link-hover-color;
  }
}


// Blockquotes
blockquote {
  border-left: $space4 solid $gray-300; // $border-color-01;
  padding-left: $space32;
  font-size: $font-large-size;
  font-family: $font-serif;
  font-style: italic;
  font-weight: $font-weight-normal;
  margin: 1rem 0;
  > :last-child {
    margin-bottom: 0;
  }
  i, em {
    font-style: $font-weight-normal;
  }
}


// Tables
table {
  margin-bottom: $space32;
  min-width: $wrapper-small-width;
  width: 100%;
  text-align: left;
  font-size: $font-small-size;
  color: $table-text-color;
  border-collapse: collapse;
  border: 1px solid $table-border-color;
  @media screen and (max-width:$screen-small-width) {
    display: block;
    overflow-x: auto;
  }
  tr {
    &:nth-child(even) {
      background-color: $table-zebra-color;
    }
  }
  th, td {
    padding: $space8 $space16;
  }
  th {
    background-color: $table-header-bg-color;
    border: 1px solid $table-header-border;
  }
  td {
    border: 1px solid $table-border-color;
  }


}

// Code formatting
pre,
code {
  font-family: $font-monospace;
  border: 1px solid $border-medium-color;
  border-radius: 3px;
  background-color: $code-background-color;
  font-size: $font-small-size;
}

code {
  padding: 1px 5px;
}

pre {
  padding: 8px 12px;
  overflow-x: auto;
  line-height: $line-narrow-height;
  > code {
    border: 0;
    padding-right: 0;
    padding-left: 0;
    font-size: $font-xsmall-size;
  }
}

.highlight {
  border-radius: 3px;
  background: $code-background-color;
  @extend %vertical-rhythm;

  .highlighter-rouge & {
    background: $code-background-color;
  }
}


// Syntax highlighting
.highlight {
  .c     { color: #998; font-style: italic } // Comment
  .err   { color: #a61717; background-color: #e3d2d2 } // Error
  .k     { font-weight: bold } // Keyword
  .o     { font-weight: bold } // Operator
  .cm    { color: #998; font-style: italic } // Comment.Multiline
  .cp    { color: #999; font-weight: bold } // Comment.Preproc
  .c1    { color: #998; font-style: italic } // Comment.Single
  .cs    { color: #999; font-weight: bold; font-style: italic } // Comment.Special
  .gd    { color: #000; background-color: #fdd } // Generic.Deleted
  .gd .x { color: #000; background-color: #faa } // Generic.Deleted.Specific
  .ge    { font-style: italic } // Generic.Emph
  .gr    { color: #a00 } // Generic.Error
  .gh    { color: #999 } // Generic.Heading
  .gi    { color: #000; background-color: #dfd } // Generic.Inserted
  .gi .x { color: #000; background-color: #afa } // Generic.Inserted.Specific
  .go    { color: #888 } // Generic.Output
  .gp    { color: #555 } // Generic.Prompt
  .gs    { font-weight: bold } // Generic.Strong
  .gu    { color: #aaa } // Generic.Subheading
  .gt    { color: #a00 } // Generic.Traceback
  .kc    { font-weight: bold } // Keyword.Constant
  .kd    { font-weight: bold } // Keyword.Declaration
  .kp    { font-weight: bold } // Keyword.Pseudo
  .kr    { font-weight: bold } // Keyword.Reserved
  .kt    { color: #458; font-weight: bold } // Keyword.Type
  .m     { color: #099 } // Literal.Number
  .s     { color: #d14 } // Literal.String
  .na    { color: #008080 } // Name.Attribute
  .nb    { color: #0086B3 } // Name.Builtin
  .nc    { color: #458; font-weight: bold } // Name.Class
  .no    { color: #008080 } // Name.Constant
  .ni    { color: #800080 } // Name.Entity
  .ne    { color: #900; font-weight: bold } // Name.Exception
  .nf    { color: #900; font-weight: bold } // Name.Function
  .nn    { color: #555 } // Name.Namespace
  .nt    { color: #000080 } // Name.Tag
  .nv    { color: #008080 } // Name.Variable
  .ow    { font-weight: bold } // Operator.Word
  .w     { color: #bbb } // Text.Whitespace
  .mf    { color: #099 } // Literal.Number.Float
  .mh    { color: #099 } // Literal.Number.Hex
  .mi    { color: #099 } // Literal.Number.Integer
  .mo    { color: #099 } // Literal.Number.Oct
  .sb    { color: #d14 } // Literal.String.Backtick
  .sc    { color: #d14 } // Literal.String.Char
  .sd    { color: #d14 } // Literal.String.Doc
  .s2    { color: #d14 } // Literal.String.Double
  .se    { color: #d14 } // Literal.String.Escape
  .sh    { color: #d14 } // Literal.String.Heredoc
  .si    { color: #d14 } // Literal.String.Interpol
  .sx    { color: #d14 } // Literal.String.Other
  .sr    { color: #009926 } // Literal.String.Regex
  .s1    { color: #d14 } // Literal.String.Single
  .ss    { color: #990073 } // Literal.String.Symbol
  .bp    { color: #999 } // Name.Builtin.Pseudo
  .vc    { color: #008080 } // Name.Variable.Class
  .vg    { color: #008080 } // Name.Variable.Global
  .vi    { color: #008080 } // Name.Variable.Instance
  .il    { color: #099 } // Literal.Number.Integer.Long
}


